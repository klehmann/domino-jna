package com.mindoo.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesResultsInfoStruct extends BaseStructure {
	/**
	 * used to associate column names, for federated and field formula override<br>
	 * C type : char[MAX_CMD_VALLEN]
	 */
	public byte[] name = new byte[NotesConstants.MAX_CMD_VALLEN];
	/**
	 * IDTable handle<br>
	 * C type : DHANDLE
	 */
	public int hResults;
	/**
	 * refers to override formulas to build output<br>
	 * C type : char[MAX_CMD_VALLEN]
	 */
	public byte[] formula_list_name = new byte[NotesConstants.MAX_CMD_VALLEN];
	/**
	 * Path to open the database to pull data, given the IDTable<br>
	 * C type : char[MAXPATH]
	 */
	public byte[] dbPath = new byte[NotesConstants.MAXPATH];
	/**
	 * Returned for each DB in JSON and summary streams<br>
	 * C type : char[NotesConstants.MAXSPRINTF/8+1]
	 */
	public byte[] replicaID = new byte[NotesConstants.MAXSPRINTF/8+1];
	/**
	 * TIMEDATE of LastModified when results were produced (to eliminate any changed documents)<br>
	 * C type : TIMEDATE
	 */
	public NotesTimeDateStruct resultsTime;
	/**
	 * if the results came from DQL, query to resolve changed documents<br>
	 * C type : MEMHANDLE
	 */
	public int hDQLQuery;
	/**
	 * The associated DQL argument list<br>
	 * C type : MEMHANDLE
	 */
	public int hDQLQargList;
	/** The flags associated with the DQL query */
	public int dwDQLFlags;
	
	public NotesResultsInfoStruct() {
		super();
	}

	@Override
	protected int getOverrideAlignment() {
		return Structure.ALIGN_DEFAULT;
	}

	public static NotesResultsInfoStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsInfoStruct>) () -> {
			return new NotesResultsInfoStruct();
		});
	}

	@SuppressWarnings("nls")
  @Override
  protected List<String> getFieldOrder() {
		return Arrays.asList("name", "hResults", "formula_list_name", "dbPath", "replicaID", "resultsTime", "hDQLQuery", "hDQLQargList", "dwDQLFlags");
	}
	
	/**
	 * @param name used to associate column names, for federated and field formula override<br>
	 * C type : char[1]<br>
	 * @param hResults IDTable handle<br>
	 * C type : DHANDLE<br>
	 * @param formula_list_name refers to override formulas to build output<br>
	 * C type : char[2]<br>
	 * @param dbPath Path to open the database to pull data, given the IDTable<br>
	 * C type : char[MAXPATH]<br>
	 * @param replicaID Returned for each DB in JSON and summary streams<br>
	 * C type : char[3]<br>
	 * @param resultsTime TIMEDATE of LastModified when results were produced (to eliminate any changed documents)<br>
	 * C type : TIMEDATE<br>
	 * @param hDQLQuery if the results came from DQL, query to resolve changed documents<br>
	 * C type : MEMHANDLE<br>
	 * @param hDQLQargList The associated DQL argument list<br>
	 * C type : MEMHANDLE<br>
	 * @param dwDQLFlags The flags associated with the DQL query
	 */
	public NotesResultsInfoStruct(byte name[], int hResults, byte formula_list_name[], byte dbPath[], byte replicaID[],
			NotesTimeDateStruct resultsTime, int hDQLQuery, int hDQLQargList, int dwDQLFlags) {
		super();
		if ((name.length != this.name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.name = name;
		this.hResults = hResults;
		if ((formula_list_name.length != this.formula_list_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.formula_list_name = formula_list_name;
		if ((dbPath.length != this.dbPath.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dbPath = dbPath;
		if ((replicaID.length != this.replicaID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.replicaID = replicaID;
		this.resultsTime = resultsTime;
		this.hDQLQuery = hDQLQuery;
		this.hDQLQargList = hDQLQargList;
		this.dwDQLFlags = dwDQLFlags;
	}
	
	public NotesResultsInfoStruct(Pointer peer) {
		super(peer);
	}
	
	public static NotesResultsInfoStruct newInstance(Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsInfoStruct>) () -> {
			return new NotesResultsInfoStruct(peer);
		});
	}

	public static NotesResultsInfoStruct.ByReference newInstanceByReference() {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsInfoStruct.ByReference>) () -> {
			return new NotesResultsInfoStruct.ByReference();
		});
	}

	public static class ByReference extends NotesResultsInfoStruct implements Structure.ByReference {
		
	};
	
	public static class ByValue extends NotesResultsInfoStruct implements Structure.ByValue {
		
	};
}
