package com.mindoo.domino.jna.internal.structs;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesFieldFormulaStruct extends BaseStructure {
	/**
	 * the query results name<br>
	 * C type : char[MAX_CMD_VALLEN]
	 */
	public byte[] resultsname = new byte[NotesConstants.MAX_CMD_VALLEN];
	/**
	 * columnname \ufffd refers to sort column name - programmatic name<br>
	 * C type : char[MAX_CMD_VALLEN]
	 */
	public byte[] columnname = new byte[NotesConstants.MAX_CMD_VALLEN];
	
  /**
   * how to build result data from documents<br>
   * C type : MEMHANDLE
   */
	public int hFormula;
	
	/** We will flag any non-matched formula entry misspelling, etc */
	public boolean bMatched;
	
	public NotesFieldFormulaStruct() {
		super();
	}
	
	@Override
	protected int getOverrideAlignment() {
		return Structure.ALIGN_DEFAULT;
	}

	public static NotesFieldFormulaStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesFieldFormulaStruct>) () -> {
			return new NotesFieldFormulaStruct();
		});
	}

	@SuppressWarnings("nls")
  @Override
  protected List<String> getFieldOrder() {
		return Arrays.asList("resultsname", "columnname", "hFormula", "bMatched");
	}
	
	/**
	 * @param resultsname the query results name<br>
	 * C type : char[MAX_CMD_VALLEN]<br>
	 * @param columnname columnname \ufffd refers to sort column name - programmatic name<br>
	 * C type : char[MAX_CMD_VALLEN]<br>
	 * @param hFormula how to build result data from documents<br>
	 * C type : MEMHANDLE<br>
	 * @param bMatched We will flag any non-matched formula entry misspelling, etc
	 */
	public NotesFieldFormulaStruct(byte resultsname[], byte columnname[], int hFormula, boolean bMatched) {
		super();
		if ((resultsname.length != this.resultsname.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.resultsname = resultsname;
		if ((columnname.length != this.columnname.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.columnname = columnname;
		this.hFormula = hFormula;
		this.bMatched = bMatched;
	}
	
	public NotesFieldFormulaStruct(Pointer peer) {
		super(peer);
	}
	
	public static NotesFieldFormulaStruct newInstance(Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesFieldFormulaStruct>) () -> {
			return new NotesFieldFormulaStruct(peer);
		});
	}

	public static class ByReference extends NotesFieldFormulaStruct implements Structure.ByReference {
		
	};
	
	public static NotesFieldFormulaStruct.ByReference newInstanceByReference() {
		return AccessController.doPrivileged((PrivilegedAction<NotesFieldFormulaStruct.ByReference>) () -> {
			return new NotesFieldFormulaStruct.ByReference();
		});
	}

	public static class ByValue extends NotesFieldFormulaStruct implements Structure.ByValue {
		
	};
}
